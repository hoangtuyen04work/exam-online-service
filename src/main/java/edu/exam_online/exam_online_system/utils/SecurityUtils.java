package edu.exam_online.exam_online_system.utils;

import lombok.AccessLevel;
import lombok.NoArgsConstructor;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationToken;

import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.List;
import java.util.Map;
import java.util.Optional;

/**
 * Ti·ªán √≠ch gi√∫p truy c·∫≠p th√¥ng tin t·ª´ Spring Security context v√† JWT token hi·ªán t·∫°i.
 */
@NoArgsConstructor(access = AccessLevel.PRIVATE)
public final class SecurityUtils {

    /**
     * L·∫•y Authentication hi·ªán t·∫°i (JwtAuthenticationToken, UsernamePasswordAuthenticationToken,...)
     */
    public static Authentication getAuthentication() {
        return Optional.ofNullable(SecurityContextHolder.getContext())
                .map(SecurityContext::getAuthentication)
                .orElse(null);
    }

    /**
     * √âp ki·ªÉu Authentication sang class mong mu·ªën (n·∫øu h·ª£p l·ªá).
     */
    public static <T extends Authentication> T getAuthentication(Class<T> clazz) {
        Authentication authentication = getAuthentication();
        return clazz.isInstance(authentication) ? clazz.cast(authentication) : null;
    }

    /**
     * L·∫•y to√†n b·ªô claim c·ªßa JWT hi·ªán t·∫°i.
     */
    public static Map<String, Object> getJwtClaims() {
        return Optional.ofNullable(getAuthentication(JwtAuthenticationToken.class))
                .map(JwtAuthenticationToken::getTokenAttributes)
                .orElse(Map.of());
    }

    /**
     * L·∫•y gi√° tr·ªã claim c·ª• th·ªÉ (theo key).
     */
    public static String getJwtClaim(String claimName) {
        return Optional.ofNullable(getJwtClaims().get(claimName))
                .map(Object::toString)
                .orElse(null);
    }

    // ===========================================================
    // üîπ C√°c helper method d√†nh ri√™ng cho token c·ªßa b·∫°n
    // ===========================================================

    /**
     * L·∫•y "sub" (subject, th∆∞·ªùng l√† email ho·∫∑c username).
     */
    public static Long getUserId() {
        return Long.parseLong(getJwtClaim("sub"));
    }

    /**
     * L·∫•y danh s√°ch role t·ª´ claim "roles".
     */
    @SuppressWarnings("unchecked")
    public static List<String> getRoles() {
        Object roles = getJwtClaims().get("roles");
        if (roles instanceof List<?> list) {
            return list.stream().map(Object::toString).toList();
        }
        return List.of();
    }

    /**
     * L·∫•y th·ªùi ƒëi·ªÉm token ƒë∆∞·ª£c c·∫•p (claim "iat").
     */
    public static LocalDateTime getIssuedAt() {
        Object value = getJwtClaims().get("iat");
        if (value instanceof Number num) {
            return LocalDateTime.ofInstant(Instant.ofEpochSecond(num.longValue()), ZoneOffset.UTC);
        }
        return null;
    }

    /**
     * L·∫•y th·ªùi ƒëi·ªÉm token h·∫øt h·∫°n (claim "exp").
     */
    public static LocalDateTime getExpiresAt() {
        Object value = getJwtClaims().get("exp");
        if (value instanceof Number num) {
            return LocalDateTime.ofInstant(Instant.ofEpochSecond(num.longValue()), ZoneOffset.UTC);
        }
        return null;
    }

    /**
     * Ki·ªÉm tra token ƒë√£ h·∫øt h·∫°n ch∆∞a.
     */
    public static boolean isTokenExpired() {
        LocalDateTime exp = getExpiresAt();
        return exp != null && exp.isBefore(LocalDateTime.now(ZoneOffset.UTC));
    }
}
